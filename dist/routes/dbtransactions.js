"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const mysql = require("mysql");
const url = require("url");
const crypto = require("crypto");
const bcrypt = require("bcrypt");
const config_1 = require("../config/config");
const utils_1 = require("../modules/utils");
const router = express.Router();
const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: config_1.dbPass,
    database: 'loginsystem'
});
router.get('/todo', (req, res) => {
    if (!req.session.isLoggedIn)
        return res.redirect(url.format({ pathname: '/signup' }));
    connection.query('SELECT id, name, done FROM items WHERE user=?', [req.session.uid], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/todo', query: { error: 'dberror' } }));
        res.render('pages/todo', { items: results });
    });
});
router.get('/mark', (req, res) => {
    const as = req.query.as;
    const item = req.query.item;
    if (as === 'done') {
        connection.query('UPDATE items SET done = 1 WHERE id = ? AND user = ?', [item, req.session.uid], (err, results, fields) => {
            if (err)
                return res.redirect(url.format({ pathname: '/todo', query: { error: 'dberror' } }));
            res.redirect(url.format({ pathname: '/todo' }));
        });
    }
    else if (as === 'notdone') {
        connection.query('UPDATE items SET done = 0 WHERE id = ? AND user = ?', [item, req.session.uid], (err, results, fields) => {
            if (err)
                return res.redirect(url.format({ pathname: '/todo', query: { error: 'dberror' } }));
            res.redirect(url.format({ pathname: '/todo' }));
        });
    }
});
router.get('/remove', (req, res) => {
    const as = req.query.as;
    const item = req.query.item;
    if (as !== 'remove')
        return res.redirect(url.format({ pathname: '/todo' }));
    connection.query('DELETE FROM items WHERE id = ? AND user = ?', [item, req.session.uid], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/todo', query: { error: 'dberror' } }));
        res.redirect(url.format({ pathname: '/todo' }));
    });
});
router.post('/reset', (req, res) => {
    if (!req.body.email)
        return res.redirect(url.format({ pathname: '/signup' }));
    const email = req.body.email;
    const selector = crypto.randomBytes(8).toString('hex');
    const token = utils_1.hex2bin(crypto.randomBytes(32).toString('hex')).result;
    const uri = `localhost:5000/createnewpassword?selector=${selector}&validator=${utils_1.bin2hex(token).result.toLowerCase()}`;
    const expires = (Date.now() / 1000) + 900;
    connection.query('DELETE FROM pwdreset WHERE email = ?', [email], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
        bcrypt.hash(token, 10, (err, encrypted) => __awaiter(this, void 0, void 0, function* () {
            if (err)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
            connection.query('INSERT INTO pwdreset (email, selector, token, expires) VALUES (?, ?, ?, ?)', [email, selector, encrypted, expires]);
            const subject = 'Password reset for TBE';
            let message = '<p>This is a password reset request. Click the link to reset your password. If you did not make this request, you can ignore this e-mail.</p>';
            message += '<p>Here is your password reset link: </br>';
            message += `<a href="${uri}">${uri}</a></p>`;
            yield utils_1.newUserEmail(email, subject, message);
            res.redirect(url.format({ pathname: '/signup', query: { reset: 'success' } }));
        }));
    });
});
router.post('/signup-submit', (req, res) => {
    const username = req.body.uid;
    const email = req.body.mail;
    const password = req.body.pwd;
    const passwordRepeat = req.body.pwdrepeat;
    if (!username || !email || !password || !passwordRepeat)
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'emptyfields', uid: username, mail: email } }));
    if (!email.match(/\S+@\S+\.\S+/) && !username.match(/^[a-zA-Z0-9]*$/))
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'invalidmailuid' } }));
    if (!email.match(/\S+@\S+\.\S+/))
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'invalidmail', uid: username } }));
    if (!username.match(/^[a-zA-Z0-9]*$/))
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'invaliduid', mail: email } }));
    if (password !== passwordRepeat)
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'passwordcheck', uid: username, mail: email } }));
    connection.query('SELECT uid FROM users WHERE uid=?', [username], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
        if (results.length > 0)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'usertaken', mail: email } }));
        bcrypt.hash(password, 10, (err, encrypted) => {
            if (err)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
            connection.query('INSERT INTO users (uid, email, pwd) VALUES (?, ?, ?)', [username, email, encrypted], (err, results, fields) => {
                return res.redirect(url.format({ pathname: '/signup', query: { signup: 'success' } }));
            });
        });
    });
});
router.post('/login-submit', (req, res) => {
    const username = req.body.uid;
    const password = req.body.pwd;
    if (!username || !password)
        return res.redirect(url.format({ pathname: '/signup', query: { error: 'emptyfields' } }));
    connection.query('SELECT * FROM users WHERE uid=?', [username], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
        if (results.length < 1)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'invalidlogin' } }));
        bcrypt.compare(password, results[0].pwd, (err, same) => {
            if (err)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
            if (!same)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'invalidlogin' } }));
            req.session.isLoggedIn = true;
            req.session.username = username;
            req.session.uid = results[0].id;
            res.redirect(url.format({ pathname: '/todo', query: { login: 'success' } }));
        });
    });
});
router.post('/resetpassword', (req, res) => {
    if (!req.body.pwd)
        return res.redirect(url.format({ pathname: '/signup', query: { newpwd: 'empty' } }));
    const password = req.body.pwd;
    const passwordRepeat = req.body.pwdrepeat;
    if (password !== passwordRepeat)
        return res.redirect(url.format({ pathname: '/signup', query: { newpwd: 'pwdnomatch' } }));
    const selector = req.body.selector;
    const validator = req.body.validator;
    const currentDate = Date.now() / 1000;
    connection.query('SELECT * FROM pwdreset WHERE selector=? AND expires >= ?', [selector, currentDate], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
        if (results.length < 1 || results.length > 1)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'tokenexpired' } }));
        const tokenBin = utils_1.hex2bin(validator).result;
        const tokenCheck = bcrypt.compareSync(tokenBin, results[0].token);
        if (!tokenCheck)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'autherror' } }));
        const tokenEmail = results[0].email;
        connection.query('SELECT * FROM users WHERE email=?;', [tokenEmail], (err, results, fields) => {
            if (err)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
            if (results.length < 1 || results.length > 1)
                return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
            bcrypt.hash(password, 10, (err, encrypted) => {
                if (err)
                    return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
                connection.query('UPDATE users SET pwd=? WHERE email=?', [encrypted, tokenEmail], (err, results, fields) => {
                    if (err)
                        return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
                    connection.query('DELETE FROM pwdreset WHERE email=?', [tokenEmail], (err, results, fields) => {
                        res.redirect(url.format({ pathname: '/signup', query: { newpwd: 'passwordupdated' } }));
                    });
                });
            });
        });
    });
});
router.post('/logout', (req, res) => {
    req.session.destroy(err => { if (err)
        console.error(err); });
    res.redirect(url.format({ pathname: '/signup' }));
});
router.post('/add', (req, res) => {
    const item = req.body.name;
    connection.query('INSERT INTO items (name, user, done, created) VALUES (?, ?, 0, NOW())', [item, req.session.uid], (err, results, fields) => {
        if (err)
            return res.redirect(url.format({ pathname: '/signup', query: { error: 'dberror' } }));
        res.redirect(url.format({ pathname: '/todo' }));
    });
});
module.exports = router;
//# sourceMappingURL=data:application/json;base64,